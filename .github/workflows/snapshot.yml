# name: Deploy
# on:
#   push:
#     branches:
#       - main     # Production

# TODO:
# make variable for snapshot identifier be {commitHash}-{Env}
# restore-db-instance-identifier will be: {commitHash}-green  –––– First character must be a letter, consider swapping naming convention
# Get new endpoint from restored db and store in variable
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "us-west-1"

jobs:
# Run Internal Remote tests
  aws-cli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install awscli


  create-snapshot:
    if: github.ref_name == 'main'
    needs: aws-cli
    outputs:
      snapshotIdentifier: ${{steps.blue-db-snapshot.outputs.DBSnapshot}}
    name: Snapshot of Blue db
    runs-on: ubuntu-latest
    steps:
    # Another Step before the snapshot to make sure the db is available

    - name: Blue Snapshot
      id: blue-db-snapshot
      # Name for snapshot? {commitHash}-{env}
      # Notes - Potential issue with this naming convention as first character has to be a letter
      # Maybe change to {env}-commitHash
      run: |
        DBSnap_ID=$(aws rds create-db-snapshot --db-instance-identifier gh-blue-database --db-snapshot-identifier production-${{github.sha}} --query "DBSnapshot.DBSnapshotIdentifier" --output text)
        echo "DBSnapshot=$DBSnap_ID" >> $GITHUB_OUTPUT
  debug:
    needs: [create-snapshot]
    runs-on: ubuntu-latest
    steps:
      - name: Debug output
        run: |
          echo "${{ toJson(needs.create-snapshot) }}"


# Restoring From given snapshot
  restore-from-snapshot:
    if: github.ref_name == 'main'
    needs: [aws-cli, create-snapshot]
    outputs:
      greenDBEndpoint: ${{steps.restored-db.outputs.endpointURL}}
    name: Restore from blue
    runs-on: ubuntu-latest
    steps:
    - name: Restoring from blue
      id: restored-db
      run: | 
        aws rds wait db-snapshot-completed --db-snapshot-identifier ${{ needs.create-snapshot.outputs.snapshotIdentifier }}
        aws rds restore-db-instance-from-db-snapshot --db-instance-identifier green-${{github.sha}} --db-snapshot-identifier ${{needs.create-snapshot.outputs.snapshotIdentifier}}
        aws rds wait db-instance-available --db-instance-identifier green-${{github.sha}}
        echo "Testing outputs in restore job- ${{ needs.create-snapshot.snapshotIdentifier }}"
        RestoredEndpointURL=$(aws rds describe-db-instances --db-instance-identifier green-${{github.sha}} --query "DBInstances[*].Endpoint.Address" --output text)
        echo "endpointURL=$RestoredEndpointURL" >> $GITHUB_OUTPUT
        echo "The URL- $RestoredEndpointURL"

  debugTwo:
    needs: [restore-from-snapshot]
    runs-on: ubuntu-latest
    steps:
      - name: Debug output
        run: |
          echo "${{ toJson(needs.restore-from-snapshot) }}"

  delete-green-db:
    needs: [aws-cli, restore-from-snapshot]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Terminating DB instance
        run: aws rds delete-db-instance --db-instance-identifier green-${{github.sha}} --skip-final-snapshot

# Db instance identifier {commitHash}-green
# Get endpoint url for green db