name: 'Terraform'
on:
  push:
    branches:
      - main
      - feature1
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Branch Check
        id: branch_check
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "workingDirectory=./environments/prod" >> $GITHUB_OUTPUT
            echo "workingBranch=refs/heads/main" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/feature1" ]; then
            echo "workingDirectory=./environments/stage" >> $GITHUB_OUTPUT
            echo "workingBranch=refs/heads/stage" >> $GITHUB_OUTPUT
          fi       
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Terraform version
        id: version
        working-directory: ${{ steps.branch_check.outputs.workingDirectory }}
        run: terraform -v
      - name: Terraform Format
        id: fmt
        working-directory: ${{ steps.branch_check.outputs.workingDirectory }}
        run: terraform fmt -check
      - name: Terraform Init
        working-directory: ${{ steps.branch_check.outputs.workingDirectory }}
        id: init
        run: terraform init
      - name: Terraform Validate
        working-directory: ${{ steps.branch_check.outputs.workingDirectory }}
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        working-directory: ${{ steps.branch_check.outputs.workingDirectory }}
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Update Pull Request
        working-directory: ${{ steps.branch_check.outputs.workingDirectory }}
        uses: actions/github-script@v6.1.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        working-directory: ${{ steps.branch_check.outputs.workingDirectory }}
        if: steps.plan.outcome == 'failure'
        run: exit 1  
      - name: Terraform Apply
        working-directory: ${{ steps.branch_check.outputs.workingDirectory }}
        if: github.ref == ${{ steps.branch_check.outputs.workingBranch }} && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      outputs:
        workingDirectory: ${{ steps.branch_check.outputs.workingDirectory }}
        workingBranch: ${{ steps.branch_check.outputs.workingBranch }}    