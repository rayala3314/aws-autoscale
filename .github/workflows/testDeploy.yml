name: Deploy New Code 
on:
  push:
    branches:
      - main
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "us-west-1"


jobs:

# only runs additional steps if there is no other instance of `my-workflow.yml` currently runningsss
  # debug:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Debug output
  #       run: |
  #         echo "${{ github.ref_name }}"
  #         echo "${{ github.event.after }}"
  #         echo "${{ github.event.before }}"
  #         echo "${{ github.event.branch }}"
  #     - name: Dump GitHub context
  #       env:
  #         GITHUB_CONTEXT: ${{ toJson(github) }}
  #       run: echo "$GITHUB_CONTEXT"

  # wait-for-queued-workflow:
  #   if: github.ref_name == 'main'
  #   runs-on: ubuntu-latest
  #   name: workflow-last
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: ahmadnassri/action-workflow-queue@v1
  #       with:
  #         timeout: 24000000
  aws-cli: #Installing the AWS CLI on the runner, needed for the autoscaling cli commands. 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install awscli
  
  # wait-for-queued-workflow:
  #   if: github.ref_name == 'main'
  #   runs-on: ubuntu-latest
  #   name: workflow-last
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: ahmadnassri/action-workflow-queue@v1
  #       with:
  #         timeout: 24000000

  block_prs:
    runs-on: ubuntu-latest

    steps:
      - name: Set Status Check (Blocking)
        run: |
          # Use GitHub's API to set a blocking status check
          TOKEN=${{secrets.GHU_TOKEN}}
          REPO=$GITHUB_REPOSITORY
          BRANCH="main" # Replace with the branch you want to protect
          CONTEXT="block-prs-during-workflow"
          STATUS="failure"
          DESCRIPTION="Workflow is running, PRs are blocked"
          SHA=$GITHUB_SHA

          curl -H "Authorization: token $TOKEN" \
               -H "Content-Type: application/json" \
               --request POST \
               --data "{\"state\":\"$STATUS\",\"description\":\"$DESCRIPTION\",\"context\":\"$CONTEXT\"}" \
               "https://api.github.com/repos/$REPO/statuses/$SHA"


  deploy-dev:
    runs-on: ubuntu-latest
    # needs:
    #   - wait-for-queued-workflow
    steps:
      - name: Debug Workspace Contents
        run: ls -la /home/runner/work/aws-autoscale/aws-autoscale
      - name: Job One
        run: |
          echo "Testing and Deploying"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Run smoke tests
        if: contains(github.event.head_commit.message, 'smoke_test')
        run: |
            echo 'Running smoke tests!'
            exit 1

  # timer-wait-two:
  #   needssss:
  #     - deploy-dev
  #   if: success()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Wait 1 minutes for attachment to complete
  #       uses: jakejarvis/wait-action@master
  #       with:
  #         time: '1m'
  #     - name: Fail
  store-latest-tag:
    runs-on: ubuntu-latest
    needs:
      - deploy-dev
    steps:
      - name: Update Parameter Store Endpoint secret
        uses: joshghent/aws-ssm-parameter-store@v2.2.0
        with:
          ssm-path: "/developStable"
          ssm-value: develop-${{github.event.after}}   # This references the tag from the release that triggered the workflow
          aws-region: us-west-1
          ssm-value-type: "String"

  # parmater-sto:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - store-latest-tag
  #     - aws-cli
  #   steps:
  #     - name: Check Parameter Store Endpoint secret
  #       run: |
  #         stableCommit=$(aws ssm get-parameter --name /developStable --with-decryption --region us-west-1 --query Parameter.Value --output text)
  #         echo "$stableCommit"

    
  
  rollback-failure:
    runs-on: ubuntu-latest
    needs:
      - deploy-dev
      - aws-cli
    if: failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
           ref: ${{ github.ref_name }}
           fetch-depth: 0
           token: ${{ secrets.GHU_TOKEN }}

      - name: Debug Workspace Contents
        run: pwd

      - name: Debug Git Config
        run: |
          git config --list
          
      - name: Debug Git Status
        run: git status
        
      - name: Debug Git Log
        run: git log -n 10

      - name: Revert
        run: |
          stableCommit=$(aws ssm get-parameter --name /developStable --with-decryption --region us-west-1 --query Parameter.Value --output text)
          parsedCommit="${stableCommit#develop-}"
          echo "$stableCommit"
          echo "$parsedCommit"
          git checkout ${{github.ref_name}}
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if the commit is a merge commit
          if git cat-file -p $parsedCommit | grep -q "parent"; then
            git revert $parsedCommit -m 1
          else
            git revert $parsedCommit
          fi
          
          git commit --amend -m "Reverting back code [skip actions]"
          git push --force

  wait-for-queued-workflow:
    if: github.ref_name == 'main'
    needs: deploy-dev
    runs-on: ubuntu-latest
    name: workflow-last
    steps:
      - name: Wait 1 minutes for attachment to complete
        uses: jakejarvis/wait-action@master
        with:
          time: '3m'





  unblock_prs:
    runs-on: ubuntu-latest
    needs: [block_prs,wait-for-queued-workflow]

    steps:
      - name: Set Status Check (Unblocking)
        run: |
          # Use GitHub's API to set an unblocking status check
          TOKEN=${{secrets.GHU_TOKEN}}
          REPO=$GITHUB_REPOSITORY
          BRANCH="main" # Replace with the branch you want to protect
          CONTEXT="block-prs-during-workflow"
          STATUS="success"
          DESCRIPTION="Workflow has completed, PRs can be created/merged"
          SHA=$GITHUB_SHA

          curl -H "Authorization: token $TOKEN" \
               -H "Content-Type: application/json" \
               --request POST \
               --data "{\"state\":\"$STATUS\",\"description\":\"$DESCRIPTION\",\"context\":\"$CONTEXT\"}" \
               "https://api.github.com/repos/$REPO/statuses/$SHA"




  # unlock-branch:d
  #   runs-on: ubuntu-latest
  #   needs: [wait-for-queued-workflow, gh-cli-install]
  #   steps:
  #     - name: Unlock Branch
  #       run: |
  #         TOKEN=${{secrets.GHU_TOKEN}}
  #         REPO=aws-autoscale
  #         BRANCH="main" # Replace with the name of the branch to unlock

  #         curl -X DELETE \
  #             -H "Authorization: token $TOKEN" \
  #             -H "Accept: application/vnd.github.v3+json" \
  #             "https://api.github.com/repos/$REPO/branches/$BRANCH/protection"

  
  
  # stableCommit=$(aws ssm get-parameter --name /developStable --with-decryption --region us-west-1 --query Parameter.Value --output text)
  # parsedCommit="${stableCommit#develop-}"
  # echo "$stableCommit"
  # echo "$parsedCommit"
  # git checkout ${{github.ref_name}}
  # git config --global user.name "github-actions[bot]"
  # git config --global user.email "github-actions[bot]@users.noreply.github.com"
  # git revert $parsedCommit -m 1 
  # git commit --amend -m "Reverting back code [skip actions]"
  # git push --force
# Example with resolving merge conflicts

# - name: Revert
#   run: |
#     stableCommit=$(aws ssm get-parameter --name /developStable --with-decryption --region us-west-1 --query Parameter.Value --output text)
#     parsedCommit="${stableCommit#develop-}"
#     echo "$stableCommit"
#     echo "$parsedCommit"
#     git checkout ${{ github.ref_name }}
#     git config --global user.name "github-actions[bot]"
#     # Attempt to revert the commit
#     git revert $parsedCommit -m 1
    
#     git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
#     # Check for conflicts
#     if [[ $? -ne 0 ]]; then
#       echo "Merge conflict detected. Resolve the conflict and commit."
#       # Handle the conflict resolution manually in the 'testMerge.py' file
    
#       # Stage the resolved changes
#       git add testMerge.py
      
#       # Continue the revert
#       git revert --continue
#     fi
    
#     # Commit the resolution
#     git commit -m "Resolved merge conflict and completed revert [skip actions]"
    
#     # Push the changes (force push might be required if you rewrote history)
#     git push --force




  # Revert commit (only should run on failure of some phase in a CI/CD pipeline)
      # - name: Automatic Commit Revert
      #   uses: 'tofu-apis/revert-commit-action@v0.0.37'
      #   with:
      #     github-token: ${{ secrets.GHU_TOKEN }}
      #     is-push-enabled: 'true'
      # - name: Rolls back to a certain version
      #   env:
      #     GITHUB_WORKSPACE: "/home/runner/work/aws-autoscale/aws-autoscale"
      #   uses: fivebluepetals/rollback-action@v1.0
      #   with:
      #     branch: ${{ github.ref_name }}
      #     revision: ${{ github.event.before }}
      #     github_workspace: "/home/runner/work/aws-autoscale/aws-autoscale"
