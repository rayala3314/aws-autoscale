# Get Latest Tag name
#       |

# Check what branch the tag was on
#         |
# If tagged with wrong branch: error out 
# Else: refresh autoscale
# Then: Update last working commit on param store
# If tests failed: pull last working tag from param store and call workflow again with that commit

name: Get Branch of Tag
on:
  workflow_call:
  push:
    tags:
      - 'v*.*.*'
jobs:
# Get the latest Tag's branch and store into variable 
  getTB:
    runs-on: ubuntu-latest
    outputs: 
      bName: ${{steps.branch-name.outputs.branchN}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get Branch
        id: branch-name
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw/origin\/}
          echo "branchN=$branch" >> $GITHUB_OUTPUT
          echo "Branch is $branch"
  debug:
    needs: getTB
    runs-on: ubuntu-latest
    steps:
      - name: Debug output
        run: |
          echo "${{ toJson(needs.getTB) }}"
  main-s3:
    runs-on: ubuntu-latest
    needs: getTB
    if: needs.getTB.outputs.bName == '  main'
    steps:
    - name: uploading to S3
      run: |
        echo "Uploading to main s3"
        echo " branch is ${{needs.getTB.outputs.bName}}"

  feature1-s3:
    runs-on: ubuntu-latest
    needs: [getTB]
    if: needs.getTB.outputs.bName == '  feature1'
    steps:
    - name: Upload file to bucket
      uses: zdurham/s3-upload-github-action@master
      with:
        args: --acl public-read
      env:
        FILE: ./environments/prod/variables.tf
        AWS_REGION: 'us-west-1'
        S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        

# Depending on what branch do an autoscale refresh to that environment
# If brannch = stage
  # Refresh to stage environment
# If branch = develop
  # Refresh to Develop
# If branch = main
  # Refresh to Production  


# If tests are a success - update last working commit on param store


# Else
  # Grab the latest commit from param store
  # Call workflow again
  # Refresh with this last working commit 